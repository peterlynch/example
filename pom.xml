<!--

    Sonatype Nexus (TM) Open Source Version
    Copyright (c) 2007-2013 Sonatype, Inc.
    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.

    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.

    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
    Eclipse Foundation. All other trademarks are the property of their respective owners.

-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>example</groupId>
  <artifactId>example-staging</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>example-staging</name>
  <description>Example project to test Nexus staging.
  </description>
  <url>http://nexus.sonatype.org</url>

  <licenses>
    <license>
      <name>Apache 2</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
      <comments>A business-friendly OSS license</comments>
    </license>
  </licenses>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!-- release plugin using git -->
    <!-- <localCheckout>true</localCheckout>
    <pushChanges>false</pushChanges>
 -->
    <!-- may need to force this to IP if using a proxy server -->
    <http>http</http>
    <localhost>localhost</localhost>
    <port>8081</port>

    <nexusUrl>${http}://${localhost}:${port}/nexus/</nexusUrl>
    <distReleaseId>dist-release</distReleaseId>
    <distReleaseUrl>${http}://${localhost}:${port}/nexus/service/local/staging/deploy/maven2/</distReleaseUrl>
    <distSnapshotId>dist-snapshot</distSnapshotId>
    <distSnapshotUrl>${http}://${localhost}:${port}/nexus/content/repositories/snapshots</distSnapshotUrl>

    <!-- for Maven 2.x, control if SNAPSHOTs are deployed with unique versions -->
    <!-- for Maven 3.x any value has no effect, unique versions are always used -->
    <uniqueVersion>true</uniqueVersion>
  </properties>

  <scm>
    <connection>scm:git:git://github.com/peterlynch/example.git</connection>
    <developerConnection>scm:git:git@github.com:peterlynch/example.git</developerConnection>
    <url>https://github.com/peterlynch/example</url>
  </scm>

  <developers>
    <developer>
      <id>plynch</id>
      <name>Peter Lynch</name>
      <email>plynch@sonatype.com</email>
      <url>http://sonatype.com</url>
      <organization>Sonatype</organization>
      <organizationUrl>http://sonatype.com</organizationUrl>
      <roles>
        <role>developer</role>
      </roles>
      <timezone>-2.5</timezone>
      <properties>
        <wow>cool</wow>
      </properties>
    </developer>
  </developers>
  <build>

    <!--
    Main filtered and unfiltered resources.
    -->
    <resources>
      <resource>
        <directory>${project.basedir}/src/main/resources</directory>
        <filtering>false</filtering>
        <includes>
          <include>**/*</include>
        </includes>
      </resource>

      <resource>
        <directory>${project.basedir}/src/main/filtered-resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/*</include>
        </includes>
      </resource>
    </resources>

    <pluginManagement>
      <plugins>
        <!--
        See 'license-check' and 'license-format' profiles.
        -->
        <plugin>
          <groupId>com.mycila</groupId>
          <artifactId>license-maven-plugin</artifactId>
          <version>2.5</version>
          <dependencies>
            <dependency>
              <groupId>org.sonatype.buildsupport</groupId>
              <artifactId>licenses</artifactId>
              <version>5</version>
            </dependency>
          </dependencies>
          <configuration>
            <encoding>UTF-8</encoding>
            <strictCheck>true</strictCheck>
            <useDefaultExcludes>false</useDefaultExcludes>
            <header>${project.basedir}/header.txt</header>
            <includes>
              <include>**/pom.xml</include>
              <include>**/*.xml</include>
              <include>**/*.xsd</include>
              <include>**/*.xjb</include>
              <include>**/*.properties</include>
              <include>**/*.ini</include>
              <include>**/*.java</include>
              <include>**/*.groovy</include>
              <include>**/*.scala</include>
              <include>**/*.aj</include>
              <include>**/*.js</include>
              <include>**/*.css</include>
              <include>**/*.help</include>
              <include>**/*.proto</include>
              <include>**/*.sm</include>
              <include>**/*.bat</include>
              <include>**/*.xsl</include>
              <include>**/*.html</include>
              <include>**/*.vm</include>
              <include>**/*.md</include>
            </includes>
            <excludes>
              <exclude>**/target/**</exclude>
              <exclude>**/.*/**</exclude>
              <exclude>**/dependency-reduced-pom.xml</exclude>
              <exclude>**/nbactions*.xml</exclude>
              <exclude>**/nb-configuration.xml</exclude>
              <exclude>**/atlassian-ide-plugin.xml</exclude>
              <exclude>**/release.properties</exclude>
              <exclude>**/META-INF/services/**</exclude>
            </excludes>
            <mapping>
              <aj>JAVADOC_STYLE</aj>
              <groovy>JAVADOC_STYLE</groovy>
              <help>SCRIPT_STYLE</help>
              <ini>SCRIPT_STYLE</ini>
              <java>SLASHSTAR_STYLE</java>
              <md>XML_STYLE</md>
              <proto>DOUBLESLASH_STYLE</proto>
              <scala>SLASHSTAR_STYLE</scala>
              <sm>DOUBLESLASH_STYLE</sm>
              <vm>SHARPSTAR_STYLE</vm>
              <xjb>XML_STYLE</xjb>
            </mapping>
            <aggregate>true</aggregate>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-release-plugin</artifactId>
          <version>2.2.1</version>
          <configuration>
            <autoVersionSubmodules>true</autoVersionSubmodules>
            <goals>deploy</goals>
            <!-- git pushChanges and localCheckout for dvcs and require a 'git push origin \-\-tags :' after release:perform -->
            <!-- since we test with svn, suggest you do not mess with these -->
            <!--
            <localCheckout>${localCheckout}</localCheckout>
            <pushChanges>${pushChanges}</pushChanges>
            -->
            <!--  forked path prevents hang see MGPG-9 -->
            <mavenExecutorId>forked-path</mavenExecutorId>
            <releaseProfiles>release</releaseProfiles>
            <useReleaseProfile>false</useReleaseProfile>
            <!-- maven 2.2.1 does not necessarily pick up bare -Darguments value, so you'll need to explicitly set it here -->
            <!-- <arguments>-X -Dmaven.wagon.provider.http=httpclient</arguments> -->
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.7</version>
          <!-- this bit required for interop with Maven 2.x, done automatically with Maven 3.x -->
          <configuration>
            <skip>true</skip>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.4</version>
          <configuration>
            <createChecksum>true</createChecksum>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.sonatype.plugins</groupId>
          <artifactId>nexus-staging-maven-plugin</artifactId>
          <!-- remember 1.5+ is Maven 3.1 compatible -->
          <!-- nexus 2.4+ requires staging-maven-plugin 1.4.4+ -->
          <!-- <version>1.5.1</version> -->
          <version>1.6</version>

          <extensions>true</extensions>
          <executions>
            <execution>
              <id>default-deploy</id>
              <phase>deploy</phase>
              <!-- By default, this is the phase deploy goal will bind to, this is explicit Maven 2.x or 3.x friendly -->
              <goals>
                <goal>deploy</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <nexusUrl>${nexusUrl}</nexusUrl>
            <!-- Profile Id override profile matching -->
            <!-- <stagingProfileId>134e2f61f9606ffb</stagingProfileId> -->
            <!-- By having none of those above, we actually use Staging V2 in "auto" mode, profile will be matched server side -->
            <!-- <stagingProgressTimeoutMinutes>5</stagingProgressTimeoutMinutes> -->
            <!-- <stagingProgressPauseDurationSeconds>3</stagingProgressPauseDurationSeconds> -->
            <!-- <keepStagingRepositoryOnCloseRuleFailure>false</keepStagingRepositoryOnCloseRuleFailure> -->
            <autoDropAfterRelease>true</autoDropAfterRelease>
            <autoReleaseAfterClose>false</autoReleaseAfterClose>

            <skipStagingRepositoryClose>false</skipStagingRepositoryClose>
            <tags>
              <localUsername>${env.USER}</localUsername>
              <javaVersion>${java.version}</javaVersion>
              <hacker>
                <script>alert('hello');</script>
              </hacker>
            </tags>
          </configuration>
        </plugin>
        <!-- old Staging V1 , call nexus-maven-plugin explicitly -->
        <plugin>
          <groupId>org.sonatype.plugins</groupId>
          <artifactId>nexus-maven-plugin</artifactId>
          <version>2.1</version>
          <configuration>
            <!-- <verboseDebug>true</verboseDebug> -->
            <!-- <nexusUrl>${http}://${localhost}:${port}/nexus/service/local/staging/deploy/maven2/</nexusUrl> --></configuration>
        </plugin>
        <!-- tool for creating repository bundles for manual upload into a repository manager, staging bundle uploads -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-repository-plugin</artifactId>
          <version>2.3.1</version>
        </plugin>
        <!-- if using maven 2.2.1, override super-pom dumb defaults -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.1</version>
          <configuration>
            <source>1.6</source>
            <target>1.6</target>
          </configuration>
        </plugin>
        <!-- for uploading the source jar with the repository:bundle-create -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>2.1.2</version>
        </plugin>
        <!-- for including the javadoc jar with repository:bundle-create -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>2.9.1</version>
        </plugin>
        <!-- so that bundles can be signed -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-gpg-plugin</artifactId>
          <version>1.4</version>
          <executions>
            <execution>
              <id>sign-artifacts</id>
              <phase>verify</phase>
              <goals>
                <goal>sign</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <useAgent>true</useAgent>
            <executable>/usr/local/MacGPG2/bin/gpg2</executable>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>2.3.1</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>1.7</version>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <!-- evil https://code.google.com/p/maven-deferred-deploy-plugin/ -->
      <plugin>
        <groupId> org.apache.maven.plugins</groupId>
        <artifactId>maven-deferred-deploy-plugin</artifactId>
        <version>1.0-beta-1</version>
      </plugin>

      <plugin>
        <groupId>org.sonatype.plugins</groupId>
        <artifactId>nexus-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.sonatype.plugins</groupId>
        <artifactId>nexus-staging-maven-plugin</artifactId>
        <configuration>
          <!-- <serverId>${distSnapshotId}</serverId> -->
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-repository-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-javadoc</id>
            <goals>
              <goal>jar</goal>
            </goals>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-source</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>
    </plugins>

    <extensions>
    </extensions>

  </build>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.10</version>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <version>1.3</version>
    </dependency>
      <!-- core To override any version from transitive dependencies. -->
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>1.3</version>
    </dependency>
  </dependencies>

  <distributionManagement>
    <repository>
      <id>${distReleaseId}</id>
      <url>${distReleaseUrl}</url>
    </repository>
    <snapshotRepository>
      <id>${distSnapshotId}</id>
      <url>${distSnapshotUrl}</url>
      <uniqueVersion>${uniqueVersion}</uniqueVersion>
    </snapshotRepository>
    <site>
      <id>nexus-site</id>
      <!-- nexus book says use dav -->
      <url>dav:http://${localhost}:${port}/nexus/content/sites/site</url>
    </site>
  </distributionManagement>

  <profiles>

    <profile>
      <id>release</id>
      <build>
        <plugins>
          <!-- deploy plugin is left in case some project would like to use it instead of staging plugin -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-deploy-plugin</artifactId>
            <configuration>
              <updateReleaseInfo>true</updateReleaseInfo>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <configuration>
              <serverId>${distReleaseId}</serverId>
              <updateReleaseInfo>true</updateReleaseInfo>
            </configuration>
          </plugin>

        </plugins>
      </build>
    </profile>


    <profile>
      <!-- make jar with no classes nxcm-2185-->
      <id>no-class</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <configuration>
              <excludes>
                <exclude>**/*.class</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <!-- make extra classifier jar-->
      <id>classifier</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>jar</goal>
                </goals>
                <configuration>
                  <classifier>exeptions</classifier>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <!-- make source jar with no .java nxcm-2200-->
      <id>no-java</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-source-plugin</artifactId>
            <executions>
              <execution>
                <id>attach-source</id>
                <goals>
                  <goal>jar-no-fork</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <excludes>
                    <exclude>**/*.java</exclude>
                  </excludes>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>mvn3</id>
      <activation>
        <file>
          <exists>${basedir}</exists>
        </file>
      </activation>
      <!-- http://maven.apache.org/plugins/maven-site-plugin/maven-3.html -->
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-site-plugin</artifactId>
            <!-- use compatible plugin versions https://cwiki.apache.org/confluence/display/MAVEN/AetherClassNotFound -->
            <version>3.3</version>
            <executions>
              <execution>
                <id>attach-descriptor</id>
                <goals>
                  <goal>attach-descriptor</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-project-info-reports-plugin</artifactId>
            <version>2.7</version>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>sign</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>directdeploy</id>
      <properties>
        <distReleaseUrl>${http}://${localhost}:${port}/nexus/content/repositories/releases/</distReleaseUrl>
      </properties>
      <!-- override staging v2 deployment by using this profile -->
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-deploy-plugin</artifactId>
              <configuration>
                <skip>false</skip>
              </configuration>
            </plugin>
            <plugin>
              <groupId>org.sonatype.plugins</groupId>
              <artifactId>nexus-staging-maven-plugin</artifactId>
              <configuration>
                <!-- no Staging happens at all, act like maven deploy plugin -->
                <skipStaging>true</skipStaging>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <profile>
      <id>nosum</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-install-plugin</artifactId>
            <configuration>
              <createChecksum>false</createChecksum>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- deploys custom metadata https://support.sonatype.com/entries/21474027 -->
    <profile>
      <id>metadata</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>attach-artifacts</id>
                <phase>package</phase>
                <goals>
                  <goal>attach-artifact</goal>
                </goals>
                <configuration>
                  <artifacts>
                    <artifact>
                      <file>${project.build.outputDirectory}/metadata.n3</file>
                      <type>n3</type>
                      <classifier>metadata</classifier>
                    </artifact>
                  </artifacts>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

  </profiles>

</project>
